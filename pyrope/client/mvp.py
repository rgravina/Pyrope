""" Implements a basic Model-View-Presenter app framework. 
See http://wiki.wxpython.org/ModelViewPresenter """

class View(object):
    def start(self):
        self.Show(True)

class Interactor(object):
    """ I represent an Interactor in the MVP pattern. Subclasses can register 
    events generated by the view to listen in on (and possibly call the presented) 
    but I don"t do anything """
    def Install(self, presenter, view):
        self.presenter = presenter
        self.view = view

class Presenter(object):
    """ I represent the Presenter in the MVP Pattern. Subclasses should declare 
    methods for initView(), onLoadViewFromModel() and onUpdateModelFromView() 
    where there should initialise the view, update the view from the model and 
    update the model from the view, respectively. """
    def __init__(self, model, view, interactor):
        self.isListening = True
        self.model = model
        self.view = view
        interactor.Install(self, view)

    def start(self):
        self.isListening = True
        self.initView()

    def initView(self):
        self.onInitView()
        self.loadViewFromModel()
        
    def onInitView(self):
        """ Subclasses should initialise the view here. """
        pass
    
    def loadViewFromModel(self):
        if self.isListening:
            self.isListening = False
            self.onLoadViewFromModel()
            self.isListening = True

    def updateModelFromView(self):
        self.onUpdateModelFromView()
        self.loadViewFromModel()

    def onLoadViewFromModel(self):
        """ Subclasses should update the view from the model here. """
        pass

    def onUpdateModelFromView(self):
        """ Subclasses should update the model from the view here. """
        pass 
